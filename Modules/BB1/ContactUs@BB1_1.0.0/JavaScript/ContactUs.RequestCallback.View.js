/*===========================================

  BB1 - G Truslove

  Date: Feb 2018

  ===========================================*/

define('ContactUs.RequestCallback.View', [
  'Backbone', 'Backbone.FormView', 'request_callback.tpl', 'GlobalViews.Message.View', 'jQuery', 'underscore', 'SC.Configuration', 'Tools',
  'ContactUs.Info.View'
], function(
  Backbone, BackboneFormView, requestCallbackTpl, MessageView, jQuery, _, Configuration, Tools, ContactUsInfoView
) {
  'use strict';

  return Backbone.View.extend({

    // When the view is rendered, it is wrapped in a div and then the template is loaded into that div. If you like, you can attach attributes to that div.
    attributes: {
      'class': 'contactus'
    },
    childViews: {
      'ContactUs.Info': function() {
        return new ContactUsInfoView();
      }
    }

    // We use bindings so that inline (frontend) validation fires immediately after the user loses focus on a particular field. It's included in Backbone.FormView and uses the validation rules we set in our frontend model.
    ,
    bindings: {
      '[name="firstname"]': 'firstname',
      '[name="lastname"]': 'lastname',
      '[name="email"]': 'email',
      '[name="phone"]': 'phone',
      '[name="time"]': 'time'
    }

    // Attaches listeners to frontend actions using jQuery selectors. We normally use the saveForm function from Backbone.FormView, which is a generic 'submit' function for sending data. However, we want to add in our own functionality to this event, so we're writing our own.
    ,
    events: {
      'submit form': 'saveTheForm'
    }

    //Generates the breadcrumbs. Arguably not necessary in functionality that only has one level, but good for familiarity, I guess
    ,
    getBreadcrumbPages: function() {
        return [{
          text: _('Schedule a Call').translate(),
          href: '/schedule-a-call'
        }]
      }

      // The main use of this is to make this view a Backbone.FormView, so that we can use its functionality.
      ,
    initialize: function(options) {
        this.options = options;
        this.application = options.application;

        BackboneFormView.add(this);
      }

      // Our custom saveForm function. First we remove any error messages that may have been generated by this function via previous calls. Then we create a promise out of the submission of the form via the saveForm method. With that we then have two callbacks: one for success and one for failure, which will generate messaging appropriate for what happened.
      ,
    saveTheForm: function(e) {
    var IAgree = $("#iagree").is(":checked");
                if (!IAgree) {
                    SC.Tools.showErrorInModal(this.application, _("Terms & Conditions").translate(), _("Please agree to the terms and conditions.").translate());
                    return false;
                }
                
        jQuery('form .global-views-message').parent().remove();

        var self = this;
        var promise = BackboneFormView.saveForm.apply(this, arguments);

        e.preventDefault();

        return promise && promise.then(
          function(success) {
            if (success.successMessage) {
              console.log("Show success " + JSON.stringify(success));
              //Tools.showSuccessInModal(self.application,_('Message Received').translate(),_(success.successMessage).translate());

              Backbone.history.navigate('schedule-a-call/thank-you', { trigger: true });

            } else {
              console.log("error " + success.message);
              Tools.showErrorInModal(self.application, _('Error').translate(), _(success.message).translate() + "<br /><br />" + success.stack);
            }
          },
          function(fail) {
            console.log("fail!!! " + fail.responseJSON.errorMessage);
            fail.preventDefault = true;

            Tools.showErrorInModal(self.application, _('Error').translate(), _(fail.responseJSON.errorMessage).translate());

          }
        );
      }

      // The function we use to actually generate the messages. It uses the global message view functionality, which is a simple of way of creating messages throughout the site, ensuring that they all look consistent. Depending on whether it is passed a field, it will generate the message either at that field's location, or simply at the bottom of the form.
      ,
    showMessage: function(message, type, field) {
        var messageView = new MessageView({
          message: message,
          type: type
        });

        if (typeof field !== 'undefined') {
          this.application.getLayout().$('[data-input="' + field + '"]').append(messageView.render().$el);
        } else {
          this.application.getLayout().$('form').append(messageView.render().$el);
        }
      }

      // Quite simply, the template we want to use.
      ,
    template: requestCallbackTpl

      // Set the page title
      ,
    getTitle: function() {
      return SC.Tools.getTitle("Schedule a Call");
    },
    getMetaDescription: function() {
      return "Use this form to Schedule a call from one of our team.";
    },

    getAddToHead: function() {
        return SC.Tools.getSEO({ title: "Schedule a Call", summary: this.getMetaDescription() });
      }
,notWeekend:function(dt){ //Check that the day is not a day of the weekend.
return dt.getDay()!=0&&dt.getDay()!=6&&dt.getDay()!=0
}
      ,
    getContext: function() {

      var times = []; //Work out available call times.
      var dt = new Date();
      var days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
      if(this.notWeekend(dt)){
      if (dt.getHours() <= 10) {
        times.push({ value: dt.toDateString() + " - This Morning", text: "This Morning" });
      }
      if (dt.getHours() <= 15) {
        times.push({ value: dt.toDateString() + " - This Afternoon", text: "This Afternoon" });
      }
      }
      dt.setDate(dt.getDate() + 1);
      if(this.notWeekend(dt)){
      times.push({ value: dt.toDateString() + " - Tomorrow Morning", text: "Tomorrow Morning" });
      times.push({ value: dt.toDateString() + " - Tomorrow Afternoon", text: "Tomorrow Afternoon" });
      }
      dt.setDate(dt.getDate() + 1);
      if(this.notWeekend(dt)){
      times.push({ value: dt.toDateString() + " - " + days[dt.getDay()] + " Morning", text: days[dt.getDay()] + " Morning" });
      times.push({ value: dt.toDateString() + " - " + days[dt.getDay()] + " Afternoon", text: days[dt.getDay()] + " Afternoon" });
      }
      dt.setDate(dt.getDate() + 1);
      if(this.notWeekend(dt)){
      times.push({ value: dt.toDateString() + " - " + days[dt.getDay()] + " Morning", text: days[dt.getDay()] + " Morning" });
      times.push({ value: dt.toDateString() + " - " + days[dt.getDay()] + " Afternoon", text: days[dt.getDay()] + " Afternoon" });
}
      return {
        usecompanies: Configuration.get('contactUs.usecompanies'),
        host: document.location.host,
        times: times
      };
    }
  });
});