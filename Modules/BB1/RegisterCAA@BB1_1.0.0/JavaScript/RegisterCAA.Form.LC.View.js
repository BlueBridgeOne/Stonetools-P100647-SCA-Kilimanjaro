define('RegisterCAA.Form.LC.View', [
    'Backbone', 
    'Backbone.FormView', 
    'register_caa_LC.tpl', 
    'GlobalViews.Message.View', 
    'jQuery', 
    'underscore', 
    'SC.Configuration', 
    'Tools',
    //'Info.View', 
    'GlobalViews.CountriesDropdown.View', 
    'GlobalViews.States.View',
    'RegisterCAA.Form.LC.Model'
  ], function (
    Backbone, 
    BackboneFormView, 
    register_caa_LC, 
    MessageView, 
    jQuery, 
    _, 
    Configuration, 
    Tools, 
    //InfoView, 
    CountriesDropdownView, 
    GlobalViewsStatesView,
    Model
  ) {
    'use strict';
  
    return Backbone.View.extend({

      cd_counter: 1,
      ap_counter: 1,

      // When the view is rendered, it is wrapped in a div and then the template is loaded into that div. If you like, you can attach attributes to that div.
      attributes: {
        'class': 'form-lc'
      },
      
      events: {
        'change [data-action="selectcountry"]': 'updateStates',
        'change [data-action="selectstate"]': 'eraseZip',
        'change [data-action="inputstate"]': 'eraseZip',
        'submit form': 'saveTheForm',
        'change input[type="checkbox"] ': 'handleCheckbox',
        'click .add_fields': 'add_fields',
        'click .remove_fields': 'remove_fields'
      }
  
      // We use bindings so that inline (frontend) validation fires immediately after the user loses focus on a particular field. It's included in Backbone.FormView and uses the validation rules we set in our frontend model.
      ,
      bindings: {
        '[name="company"]': 'company'
      }
  
        // The main use of this is to make this view a Backbone.FormView, so that we can use its functionality.
        ,
      initialize: function (options) {
          this.options = options;
          this.application = options.application;
  
          BackboneFormView.add(this);
          this.selected_country = SC.Tools.getNSCountryCode();
          this.calculateState();
        }
        //@method calculateState Pre-calculate many state variables used in the get context. In this way this is state is calculated once
        //@return {Void}
        ,
      calculateState: function () {
          this.site_settings = Configuration.get('siteSettings');
  
        }
  
        //@method eraseZip Show and hide the zip field depending on the selected country
        //@return {Void}
        ,
      eraseZip: function () {
        var selected_country = this.$('[name="country"]').val(),
          countries = Configuration.get('siteSettings.countries', {}),
          $zip_fieldset = this.$('[data-input="zip"]'),
          $zip_input = this.$('input[name="zip"]', $zip_fieldset);
  
        $zip_input.val('');
  
        if (countries[selected_country] && countries[selected_country].isziprequired === 'F') {
          $zip_fieldset.hide();
        } else {
          $zip_fieldset.show();
        }
      },
      updateStates: function (e) {
          var statesView = this.getChildViewInstance('StatesView');
          statesView.options.selectedCountry = this.$(e.currentTarget).val();
          statesView.render();
          this.eraseZip(e);
        }
  
        //@property {Object} childViews
        ,
      childViews: {
        'CountriesDropdown': function () {
  
          return new CountriesDropdownView({
            countries: Configuration.get('siteSettings.countries', {}),
            selectedCountry: this.selected_country
          });
        },
        'StatesView': function () {
          return new GlobalViewsStatesView({
            countries: Configuration.get('siteSettings.countries', {}),
            selectedCountry: this.selected_country
          });
        },

        // 'Info': function () {
        //   return new InfoView();
        // }
      }

      // Our custom saveForm function. First we remove any error messages that may have been generated by this function via previous calls. Then we create a promise out of the submission of the form via the saveForm method. With that we then have two callbacks: one for success and one for failure, which will generate messaging appropriate for what happened.
      ,
      saveTheForm: function (e) {
          var IAgree = $(e.target).find('#iagree').is(":checked");
          if (!IAgree) {
              SC.Tools.showErrorInModal(this.application, _("Terms & Conditions").translate(), _("Please agree to the terms and conditions.").translate());
              return false;
          }
  
          jQuery('.' + e.target.className + ' .global-views-message').parent().remove();
  
          var self = this;
          var promise = BackboneFormView.saveForm.apply(this, arguments);
  
          e.preventDefault();
  
          return promise && promise.then(
            function (success) {
              if (success.successMessage) {
                console.log("Show success " + JSON.stringify(success));
                //Tools.showSuccessInModal(self.application,_('Message Received').translate(),_(success.successMessage).translate());
  
                Backbone.history.navigate('registercaa-application/thank-you', {
                  trigger: true
                });
  
              } else {
                console.log("error " + success.message);
                Tools.showErrorInModal(self.application, _('Error').translate(), _(success.message).translate() + "<br /><br />" + success.stack);
              }
            },
            function (fail) {
              console.log("fail!!! " + fail.responseJSON.errorMessage);
              fail.preventDefault = true;
  
              Tools.showErrorInModal(self.application, _('Error').translate(), _(fail.responseJSON.errorMessage).translate());
  
            }
          );
        }
  
        // The function we use to actually generate the messages. It uses the global message view functionality, which is a simple of way of creating messages throughout the site, ensuring that they all look consistent. Depending on whether it is passed a field, it will generate the message either at that field's location, or simply at the bottom of the form.
        ,
      showMessage: function (message, type, field) {
          var messageView = new MessageView({
            message: message,
            type: type
          });
  
          if (typeof field !== 'undefined') {
            this.application.getLayout().$('[data-input="' + field + '"]').append(messageView.render().$el);
          } else {
            this.application.getLayout().$('form').append(messageView.render().$el);
          }
        }
  
        // Quite simply, the template we want to use.
        ,
      template: register_caa_LC,
  
      getContext: function () {
        return {
          company: Configuration.get('company'),
          usecompanies: Configuration.get('usecompanies'),
          host: document.location.host,
          showCountriesField: true,
          date: this.getDateFormatted()
            //@property {Boolean} isZipOptional
            ,
          isZipOptional: this.false
        };
      },

      getDateFormatted: function () {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1;

        var yyyy = today.getFullYear();
        if (dd < 10) {
          dd = '0' + dd;
        }
        if (mm < 10) {
          mm = '0' + mm;
        }
        return today = dd + '/' + mm + '/' + yyyy;
      },

      handleCheckbox: function(e){
        var id = e.target.id;
        if(id !== 'iagree'){
          if($(e.target).prop("checked")){
            e.target.value = 'true'
            $('.' + id).show();
          }else{
            e.target.value = 'false'
            $('.' + id).hide();
          }
        }
      },
      
      add_fields: function(e){
        var objTo = '';
        var rdiv = '';
        var divtest = document.createElement("div");

        if($(e.target).data('companydirectors')){
          this.cd_counter++;
          objTo = document.getElementById(''+ $(e.target).data('companydirectors') +'')
          divtest.setAttribute("class", "form-group removeclass_cd" + this.cd_counter);
          rdiv = 'removeclass_cd' + this.cd_counter;
          divtest.innerHTML = [
                '<div class="row">',
                  '<div class="col-sm-12 col-md-5 nopadding">',
                      '<div data-input="director_firstname" data-validation="control-group">',
                          '<span data-validation="control">',
                              '<input type="text" class="form-control full-width" name="director_firstname" id="director_firstname" placeholder="First name" maxlength="100">',
                          '</span>',
                      '</div>',
                  '</div>',
                  '<div class="col-sm-12 col-md-5 nopadding">',
                      '<div data-input="director_lastname" data-validation="control-group">',
                          '<span data-validation="control">',
                              '<input type="text" class="form-control full-width" name="director_lastname" id="director_lastname" placeholder="Last name" maxlength="100">',
                          '</span>',
                      '</div>',
                  '</div>',               
                  '<div class="col-sm-12 col-md-2">',
                      '<button class="btn btn-danger remove_fields" type="button" data-rid="cd'+ this.cd_counter +'">',
                          '<span class="fa-minus" aria-hidden="true"></span>',
                      '</button>',
                  '</div>',
                '</div>'
            ].join('');

         } else if($(e.target).data('authorisedpurchasers')){
          this.ap_counter++;
          objTo = document.getElementById(''+ $(e.target).data('authorisedpurchasers') +'')
          divtest.setAttribute("class", "form-group removeclass_ap" + this.ap_counter);
          rdiv = 'removeclass_ap' + this.ap_counter;
          divtest.innerHTML = [
              '<div class="row">',
                '<div class="col-sm-12 col-md-3 nopadding">',
                    '<div data-input="authorisedpurchasers_firstname" data-validation="control-group">',
                        '<span data-validation="control">',
                            '<input type="text" class="form-control full-width" name="authorisedpurchasers_firstname" id="authorisedpurchasers_firstname" placeholder="First name" maxlength="100">',
                        '</span>',
                    '</div>',
                '</div>',
                '<div class="col-sm-12 col-md-3 nopadding">',
                    '<div data-input="authorisedpurchasers_lastname" data-validation="control-group">',
                        '<span data-validation="control">',
                            '<input type="text" class="form-control full-width" name="authorisedpurchasers_lastname" id="authorisedpurchasers_lastname" placeholder="Last name" maxlength="100">',
                        '</span>',
                    '</div>',
                '</div>',
                '<div class="col-sm-12 col-md-4 nopadding">',
                    '<div data-input="authorisedpurchasers_email" data-validation="control-group">',
                        '<span data-validation="control">',
                            '<input type="text" class="form-control full-width" name="authorisedpurchasers_email" id="authorisedpurchasers_email" placeholder="Email">',
                        '</span>',
                    '</div>',
                '</div>',
                '<div class="col-sm-12 col-md-2">',
                  '<button class="btn btn-danger remove_fields" type="button" data-rid="ap'+ this.ap_counter +'">',
                      '<span class="fa-minus" aria-hidden="true"></span>',
                  '</button>',
                '</div>',
              '</div>'
            ].join('');
         }

        objTo.appendChild(divtest)
      },

      remove_fields: function(e){
        console.log(e);
        var rid = $(e.target).data('rid')
        $('.removeclass_'+ rid ).remove();
      }

    });
  });