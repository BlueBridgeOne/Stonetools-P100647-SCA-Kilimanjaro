/*
	Â© 2017 NetSuite Inc.
	User may not copy, modify, distribute, or re-bundle or otherwise make available this code;
	provided, however, if you are an authorized user with a NetSuite account or log-in, you
	may use this code subject to the terms that govern your access and use.
*/

// @module ProductLine
define(
	'ProductLine.Stock.View'
,	[
		'product_line_stock.tpl'

	,	'Backbone'
	]
,	function(
		product_line_stock_tpl

	,	Backbone
	)
{
	'use strict';

	// @class ProductLine.Stock.View @extends Backbone.View
	return Backbone.View.extend({

		template: product_line_stock_tpl

		//@method initialize Override default method to attach model's change event to re-render
		//@param {ProductLine.Stock.View.Initialize.options} options
		//@return {Void}
	,	initialize: function ()
		{
			this.model.on('change', this.render, this);
		}

		//@method destroy Override default method to detach from model's change event
		//@return {Void}
	,	destroy: function destroy ()
		{
			Backbone.View.prototype.destroy.apply(this, arguments);
			this.model.off('change', this.render, this);
		}

		//@method getContext
		//@return {ProductLine.Stock.View.Context}
	,	getContext: function ()
		{
			this.stock_info = this.model.getStockInfo();
			console.log(this.stock_info);
			console.log(this.model);


			var quantityavailable = -1,outofstockmessage, quantity,nextdeliverydates,itemid,leadtime,orderdate;
            

                if(false){
                quantity = lines.models[i].get("quantity");
                var item = lines.models[i].get("item");
                if (item) {

                    var matrix_parent = item.get("matrix_parent");
                    if (matrix_parent) {
                        if (matrix_parent.matrixchilditems_detail && matrix_parent.matrixchilditems_detail.length > 0) {
                            
                            nextdeliverydates=JSON.parse(matrix_parent.custitem_bb1_sca_childrennextdelivery||"{}");

                            quantityavailable = matrix_parent.matrixchilditems_detail[0].quantityavailable;
itemid=matrix_parent.matrixchilditems_detail[0].internalid;
                            lines.models[i].set("showoutofstockmessage", true);

                            

                            outofstockmessage = undefined;
                            if (quantityavailable > 0) { //In stock
                                outofstockmessage = _("Available to Ship").translate();
                                if (quantityavailable < quantity) {
                                    outofstockmessage += "<div class='stock-notes' style='display:block'>" + _("Note: Only $(0) in Stock.").translate(quantityavailable) + "<br />";

                                    //not enough stock messages
                                    var remaindermessage;
                                    if (nextdeliverydates[itemid] && nextdeliverydates[itemid].onorder) {
                                        orderdate = new Date(nextdeliverydates[itemid].onorder);

                                        if (orderdate >= today) {

                                            remaindermessage = _('Remainder Available to Ship').translate() + " " + orderdate.toDateString();
                                        }
                                    }
                                    if (!remaindermessage && nextdeliverydates[itemid] && nextdeliverydates[itemid].leadtime) {
                                        leadtime = nextdeliverydates[itemid].leadtime;
                                        if (leadtime == 1) {
                                            remaindermessage = _('Remainder Available to Ship 1 Day After Order').translate();
                                        } else if (leadtime > 1) {
                                            remaindermessage = _('Remainder Available to Ship $(0) Days After Order').translate(leadtime);
                                        }

                                    }
                                    outofstockmessage += (remaindermessage||"") + "</div>";
                                }

                            } else { //Out of stock

                                if (!outofstockmessage && nextdeliverydates[itemid] && nextdeliverydates[itemid].onorder) {
                                    orderdate = new Date(nextdeliverydates[itemid].onorder);

                                    if (orderdate >= today) {

                                        outofstockmessage = _('Available to Ship').translate() + " " + orderdate.toDateString();
                                    }
                                }
                                if (!outofstockmessage && nextdeliverydates[itemid] && nextdeliverydates[itemid].leadtime) {
                                    leadtime = nextdeliverydates[itemid].leadtime;
                                    if (leadtime == 1) {
                                        outofstockmessage = _('Available to Ship 1 Day After Order').translate();
                                    } else if (leadtime > 1) {
                                        outofstockmessage = _('Available to Ship $(0) Days After Order').translate(leadtime);
                                    }

                                }
                                outofstockmessage = outofstockmessage || _("Available to Order").translate();

                            }
lines.models[i].set("outofstockmessage", outofstockmessage);


                        }
                    }
                }
            }


			//@class ProductLine.Stock.View.Context
			return {
					//@property {Boolean} showOutOfStockMessage
					showOutOfStockMessage: true
					//@property {Item.Model.StockInfo} stockInfo
				,	stockInfo: this.stock_info
					//@property {Item.Model|Transaction.Line.Model|Item.Model model
				,	model: this.model
					//@property {Boolean} showInStockMessage
				,	showInStockMessage: false
					//@property {Boolean} isNotAvailableInStore
				,	isNotAvailableInStore: this.stock_info.isNotAvailableInStore
			};
			//@class ProductLine.Stock.View
		}
	});
});

//@class ProductLine.Stock.View.Initialize.options
//@property {Transaction.Line.Model|Item.Model|Product.Model} model
