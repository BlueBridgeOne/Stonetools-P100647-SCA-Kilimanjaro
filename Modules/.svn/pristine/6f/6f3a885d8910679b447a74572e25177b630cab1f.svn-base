/* BB1 G Truslove Oct 2017 - reusable functions */

define('Tools', ['Application', 'Profile.Model', 'underscore'], function (Application, Profile, _)
{
	'use strict';

	var Tools = {};

	/**
	 * Error handler function
	 * Works server-side only (SSP Application Execution Log)
	 *
	 * 1.0.4 fixed mis type e to error - GH
	 * 1.0.4 prevented logging of [object Object] - MJL
	 *
	 * @param {String} moduleName
	 * @param {String} functionName
	 * @param {Object} error
	 */
	function errorHandler(moduleName, functionName, error)
	{
		var message = '';

		if (error instanceof nlobjError)
		{
			//1.0.4 fixed errorhandler - GH
			message = error.getCode() + '<br/>' + error.getDetails();
		}
		else
		{
			//1.0.11 prevented logging of [object Object] - MJL
			if (error.status && error.code)
			{
				message = JSON.stringify(error);
			}
			else
			{
				message = error.toString();
			}
		}

		//console.warn translates to "ERROR" log level in Execution Log
		console.warn(moduleName + '.' + functionName + ': error occurred', message);
	}


	/**
	 * Check logged in status of Customer
	 * @added 1.0.8 - TM
	 * @return {boolean} isLoggedIn
	 */
	function isLoggedIn()
	{
		var profile = {};
		var isLoggedIn = false;
		var profileLoggedIn = 'F';

		try
		{
			profile = Profile.get();
			profileLoggedIn = profile.isLoggedIn;

			if(profileLoggedIn === 'F')
			{
				isLoggedIn = false;
			}
			else if(profileLoggedIn === 'T')
			{
				isLoggedIn = true;
			}
		}
		catch (e)
		{
			errorHandler('Tools', 'isLoggedIn', e);
		}
		return isLoggedIn;
	}

	/**
	 * Runs a search for all SCA parameters in NS
	 * 1.0.9 accessing second parameter value - MJL
	 * 1.2.0 added code to get the "long" value from the deployment parameter record, and split out the handling of the results into the getDeploymentParameterValues function
	 * @added 1.0.3 - GH
	 * @return {Object} scaParameters
	 */
	function getScaParameters()
	{
		var searchColumns = [];
		var searchFilters = [];
		var searchResults = null;
		var category = null; //1.2.0
		var scaParameters = {}; //1.2.0 renamed from JSONData
		var scaParametersStr = ""; //1.2.0
		var i = 0; //1.2.0

		try
		{
			category = getParameterCategoryPrefix();

			searchColumns[0] = new nlobjSearchColumn('custrecord_scakey');
			searchColumns[1] = new nlobjSearchColumn('custrecord_deploymentparametervalue');
			searchColumns[2] = new nlobjSearchColumn('custrecord_deploymentparametervalue2'); //1.0.9 MJL
			searchColumns[3] = new nlobjSearchColumn('custrecord_deploymentparameterhtml'); //1.0.10
			searchColumns[4] = new nlobjSearchColumn('custrecord_deploymentparameterlong'); //1.2.0 

			searchFilters[0] = new nlobjSearchFilter("custrecord_sca", null, 'is', "T");
			searchFilters[1] = new nlobjSearchFilter("custrecord_parametercategory", null, 'contains', category);

			searchResults = nlapiSearchRecord('customrecord_deploymentparameters', null, searchFilters, searchColumns);

			if (searchResults)
			{
				for(i = 0; i < searchResults.length; i++)
				{
					scaParameters = getDeploymentParameterValues(searchResults[i], searchColumns, scaParameters);
				}
			}
			scaParametersStr = JSON.stringify(scaParameters);
		}
		catch(e)
		{
			errorHandler('Tools', 'getScaParameters', e);
		}
		return scaParametersStr;
	}

	/**
	 * Get the values within the passed in result record and add it to the scaParameters object
	 * @added 1.2.0 (split from getScaParameters)
	 * @param {nlobjResult} deploymentParamRecord
	 * @param {Array} searchColumns
	 * @param {Object} scaParameters
	 * @return {Object} scaParameters
	 */
	function getDeploymentParameterValues(deploymentParamRecord, searchColumns, scaParameters)
	{
		var currentKey = '';
		var currentValue = '';
		var currentValue2 = ''; //1.0.9 MJL
		var currentValueHTML = ''; //1.0.10
		var currentValueLong = ''; //1.2.0

		try
		{
			currentKey = deploymentParamRecord.getValue(searchColumns[0]);
			currentValue = deploymentParamRecord.getValue(searchColumns[1]);
			currentValue2 = deploymentParamRecord.getValue(searchColumns[2]); //1.0.9 MJL
			currentValueHTML = deploymentParamRecord.getValue(searchColumns[3]); //1.0.10
			currentValueLong = deploymentParamRecord.getValue(searchColumns[4]); //1.2.0

			//1.0.9 MJL
			if (currentValue2)
			{
				currentValue = currentValue + '|' + currentValue2;
			}

			//1.0.10
			if (currentValueHTML)
			{
				scaParameters[currentKey + "_HTML"] = currentValueHTML;
			}

			//1.2.0
			if (currentValueLong)
			{
				scaParameters[currentKey + "_LONG"] = currentValueLong;
			}

			scaParameters[currentKey] = currentValue;
		}
		catch(e)
		{
			errorHandler('Tools', 'getDeploymentParameterValues', e);
		}
		return scaParameters;
	}

	/**
	 * lookup a single sca parameter - used for server side lookups
	 *
	 * @added 1.0.5 - GH
	 * @param  {String} parameterKey
	 * @return {String} retVal
	 */
	function lookupScaParameter(parameterKey)
	{
		var retVal = 'Not Found';
		var scaParameters = {};

		try
		{
			if(!_.isEmpty(JSON.parse(this.getScaParameters())))
			{
				scaParameters = JSON.parse(this.getScaParameters());
			}

			if(!_.isEmpty(scaParameters[parameterKey]))
			{
				retVal = scaParameters[parameterKey];
			}
		}
		catch(e)
		{
			errorHandler('Tools', 'lookupScaParameter', e);
		}
		return retVal;
	}

	/**
	* Gets category prefix for Deployment Parameter
	*
	* 1.0.7 added - MJL
	*
	* @return {String} category
	*/
	function getParameterCategoryPrefix()
	{
		var context = null;
		var environment = null;
		var company = '';
		var prefix = '';

		try
		{
			//Look up script and deployment IDs from params table
			context = nlapiGetContext();
			environment = context.getEnvironment();
			company = context.getCompany();

			prefix = environment + company;
		}
		catch(e)
		{
			errorHandler('getParameterCategoryPrefix', e);
		}
		return prefix;
	}

	/**
	 * Get correctly prefixed parameter category
	 *
	 * 1.0.7 added - MJL
	 *
	 * @param  {String} category
	 * @return {String} prefixedCategory
	 */
	function getParameterCategory(category)
	{
		var prefix = '';
		var prefixedCategory = '';

		try
		{
			prefix = getParameterCategoryPrefix();

			if (prefix)
			{
				prefixedCategory = prefix + ' ' + category;
			}
			else
			{
				prefixedCategory = category;
			}
		}
		catch(e)
		{
			errorHandler('getParameterCategory', e);
		}
		return prefixedCategory;
	}

	/**
	 * Lookup parameters
	 *
	 * 1.0.7 added - MJL
	 *
	 * @param  {String} category
	 * @param  {String} paramName
	 * @return {String} retVal
	 */
	function lookUpParameters(category, paramName)
	{
		var retVal = null;
		var internalID = 0;
		var fields = [];

		try
		{
			searchContext = {
				table: 'customrecord_deploymentparameters'
			,	filters: [
					{ fieldID: 'custrecord_parametercategory', operator: 'is', value: category }
				,	{ fieldID: 'name', operator: 'is', value: paramName }
				]
			};

			internalID = getInternalID(searchContext);

			if (internalID)
			{
				fields = ['custrecord_deploymentparametervalue', 'custrecord_deploymentparametervalue2'];
				params = nlapiLookupField('customrecord_deploymentparameters', internalID, fields);

				if (params)
				{
					retVal = params.custrecord_deploymentparametervalue;

					if (params.custrecord_deploymentparametervalue2)
					{
						retVal = retVal + '|' + params.custrecord_deploymentparametervalue2;
					}
				}
			}
		}
		catch (e)
		{
			errorHandler('lookUpParameters', e);
		}
		return retVal;
	}

	/**
	 * Get internal ID of record from given criteria
	 * A reverse nlapiLookupField; like our old genericSearch function, but a bit slicker...
	 *
	 * 1.0.7 added - MJL
	 *
	 * @param  {Object} context 	Contains search information (table name, filters)
	 * @return {Number} internalID 	Internal ID of record
	 */
	function getInternalID(context)
	{
		var filters = [];
		var filterList = {};
		var results = null;
		var internalID = 0;

		try
		{
			if (context)
			{
				filterList = context.filters;

				for (var i = 0; filterList && i < filterList.length; i++)
				{
					filters.push(new nlobjSearchFilter(filterList[i].fieldID, null, filterList[i].operator, filterList[i].value));
				}

				results = nlapiSearchRecord(context.table, null, filters);

				if (results && results.length > 0)
				{
					internalID = results[0].getId();
				}
			}
			else
			{
				throw nlapiCreateError('NO_CONTEXT_PROVIDED', 'Context parameter is undefined.');
			}
		}
		catch(e)
		{
			errorHandler("getInternalID", e);
		}
		return internalID;
	}

	// Ensure all new functions are defined here
	Tools = {
		errorHandler: errorHandler
	,	getScaParameters: getScaParameters
	,	lookupScaParameter: lookupScaParameter
	,	getParameterCategoryPrefix: getParameterCategoryPrefix	//1.0.7 MJL
	,	getParameterCategory: getParameterCategory 				//1.0.7 MJL
	,	lookUpParameters: lookUpParameters 						//1.0.7 MJL
	,	getInternalID: getInternalID 							//1.0.7 MJL
	,	isLoggedIn: isLoggedIn 									//1.0.8 TM
	,	checkLabOnly: checkLabOnly 								//1.1.0 TM
	};

	// Make Tools module available to Application
	Application.Tools = Tools;

	return Tools;
});